<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>7IN0SAN9</title>
  
  
  <link href="https://blog.7in0.me/atom.xml" rel="self"/>
  
  <link href="https://blog.7in0.me/"/>
  <updated>2021-10-04T13:26:45.186Z</updated>
  <id>https://blog.7in0.me/</id>
  
  <author>
    <name>Chino Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# 9.0 record 型別</title>
    <link href="https://blog.7in0.me/2020/12/17/csharp-9-record-types/"/>
    <id>https://blog.7in0.me/2020/12/17/csharp-9-record-types/</id>
    <published>2020-12-17T17:43:20.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> FirstName, <span class="built_in">string</span> LastName</span>)</span>;</span><br></pre></td></tr></table></figure><p>如果說 C# 8.0 我最喜歡的特性是 <code>switch</code> expression, 那麼 C# 9.0 的就是 <code>record</code> 型別.</p><span id="more"></span><h3 id="宣告">宣告</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">init</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">init</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; <span class="keyword">init</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Student &#123;</span><br><span class="line">    LastName = <span class="string">&quot;Wagner&quot;</span>,</span><br><span class="line">    FirstName = <span class="string">&quot;Bill&quot;</span>,</span><br><span class="line">    Level = <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的宣告方式與下面的宣告方式基本一致. 不過, 下面的宣告方式, 會自動實作 constructor, deconstructor 等.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> FirstName, <span class="built_in">string</span> LastName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">record</span> <span class="title">Student</span>(<span class="params"><span class="built_in">string</span> FirstName, <span class="built_in">string</span> LastName, <span class="built_in">int</span> Level</span>) : <span class="title">Person</span>(<span class="params">FirstName, LastName</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Student(<span class="string">&quot;Wagner&quot;</span>, <span class="string">&quot;Bill&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>值得注意的是, 上述所有型別均為不可變型 (immutable), 若要使值可變， 則需要使用上面的宣告方法並把 <code>init;</code> 改成 <code>set;</code>.</p><h3 id="相等">相等</h3><p><code>record</code> 型別覆寫了 <code>==</code> 和 <code>!=</code> 操作符, 當兩個例項的所有屬性均相等時, 兩個例項便“相等”.</p><p><code>record</code> 也覆寫了 <code>GetHashCode</code>.</p><h3 id="解構">解構</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (first, last) = person;</span><br></pre></td></tr></table></figure><p>須實作 deconstructor, 有點像 <code>Tuple</code>.</p><h3 id="複製">複製</h3><p>使用 <code>with</code> 關鍵字可以從一個 <code>record</code> 變數建立新變數並修改部分屬性.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> copy = person <span class="keyword">with</span> &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> classmate = person <span class="keyword">with</span> &#123; FirstName = <span class="string">&quot;Paul&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>這一特性其實依賴自動產生的 <code>protected</code> constructor, 所以可以利用這一特性快速從父類例項建立一個子類例項.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">init</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">init</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">record</span> <span class="title">Student</span> : <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Level &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span>(<span class="params">Person parent</span>) : <span class="title">base</span>(<span class="params">parent</span>)</span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person &#123;</span><br><span class="line">    LastName = <span class="string">&quot;Wagner&quot;</span>,</span><br><span class="line">    FirstName = <span class="string">&quot;Bill&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student1 = <span class="keyword">new</span> Student(person) &#123;</span><br><span class="line">    Level = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> student2 = <span class="keyword">new</span> Student(person) &#123;</span><br><span class="line">    Level = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; FirstName, &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; LastName&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果說 C# 8.0 我最喜歡的特性是 &lt;code&gt;switch&lt;/code&gt; expression, 那麼 C# 9.0 的就是 &lt;code&gt;record&lt;/code&gt; 型別.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="dotnet" scheme="https://blog.7in0.me/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>為什麼不要信任使用者輸入 (CyberSecurityREGEX)</title>
    <link href="https://blog.7in0.me/2020/11/15/why-not-trust-user-input/"/>
    <id>https://blog.7in0.me/2020/11/15/why-not-trust-user-input/</id>
    <published>2020-11-15T13:35:36.000Z</published>
    <updated>2021-10-04T13:26:45.194Z</updated>
    
    <content type="html"><![CDATA[<p>CyberSecurityRumble CTF 2020 已經過去幾周了, 因個人能力問題, 我沒能拿到多少 Flag. 不過部落格也長草許久, 今天就回顧一下其中的一個挑戰 —— CyberSecurityREGEX.</p><span id="more"></span><p><img src="afaaa943325e04b50949509766cede2f0bea3078.png" alt=""></p><p>看到此挑戰的第一時間, 我立刻意識到應該與使用者輸入驗證不嚴格有關. 同隊的 Linnaea 猜測伺服器是 NodeJS, 經過測試果然如此. <del>後來我才發現頁面上已經明確告知伺服器是 JavaScript 編寫的</del></p><p>测试用例如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;; return Object.getOwnPropertyNames(this); //</span></span><br></pre></td></tr></table></figure><p><img src="1513030f4499fd7dd62d1e00632e98410ce4a700.png" alt=""></p><p><code>simpleFs</code> 引起了我的興趣, 仔細看看:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;; return Object.getOwnPropertyNames(this.simpleFs); //</span></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: [ <span class="string">&quot;length&quot;</span>, <span class="string">&quot;prototype&quot;</span>, <span class="string">&quot;exists&quot;</span>, <span class="string">&quot;readFile&quot;</span>, <span class="string">&quot;readFileSync&quot;</span>, <span class="string">&quot;writeFile&quot;</span>, <span class="string">&quot;writeFileSync&quot;</span>, <span class="string">&quot;appendFile&quot;</span>, <span class="string">&quot;appendFileSync&quot;</span>, <span class="string">&quot;name&quot;</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>繼續嘗試:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;; return this.simpleFs.readFileSync(&#x27;</span>index.js<span class="string">&#x27;); //</span></span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: <span class="string">&quot;var express = require(&#x27;express&#x27;);\nvar cors = require(&#x27;cors&#x27;);\n\nvar app = express();\nvar api = require(&#x27;./api&#x27;)\n\napp.use(cors());\n\nprocess.on(&#x27;unhandledRejection&#x27;, (reason, promise) =&gt; &#123;\n    console.log(&#x27;Unhandled Rejection at:&#x27;, reason.stack || reason)\n&#125;)\n\n\nprocess.on(&#x27;uncaughtException&#x27;, function (err) &#123;\n    console.error(err.stack);\n&#125;);\n\napp.use((req, res, next) =&gt; &#123;\n    res.header(&#x27;Server&#x27;, &#x27;dunno&#x27;);\n    res.header(&#x27;X-Powered-By&#x27;, &#x27;love &lt;3&#x27;);\n    res.header(&#x27;Level&#x27;, (9000 + Math.random() * 1000).toFixed(0));\n    next();\n&#125;);\n\n//Static\napp.use(express.static(&#x27;dist&#x27;));\n\n//rest\napp.use(&#x27;/api&#x27;, api);\n\n//Troll\napp.use(&#x27;/admin&#x27;, function (req, res) &#123;\n    res.status(401).send();\n&#125;);\napp.use(&#x27;/phpMyAdmin&#x27;, function (req, res) &#123;\n    res.status(402).send();\n&#125;);\napp.use(&#x27;/test.php&#x27;, function (req, res) &#123;\n    res.status(403).send();\n&#125;);\n\n//Custom 404\napp.get(&#x27;*&#x27;, function (req, res) &#123;\n    res.status(404).send(&#x27;notfound.jpeg&#x27;);\n&#125;);\n\napp.listen(8080, () =&gt; &#123;\n    console.log(`Listening...`)\n&#125;);&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用此方法獲取到全部程式碼:</p><details><summary>api.js</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"><span class="keyword">var</span> RegexEr = <span class="built_in">require</span>(<span class="string">&#x27;./regexer&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/regex/:pattern/:flags/:input&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> params = &#123;</span><br><span class="line"> <span class="attr">pattern</span>: req.params.pattern,</span><br><span class="line"> <span class="attr">input</span>: req.params.input,</span><br><span class="line"> <span class="attr">flags</span>: req.params.flags</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> params.pattern = Buffer.from(req.params.pattern, <span class="string">&#x27;base64&#x27;</span>).toString();</span><br><span class="line"> params.input = Buffer.from(req.params.input, <span class="string">&#x27;base64&#x27;</span>).toString().replace(<span class="regexp">/\\n/gm</span>, <span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line"> params.flags = Buffer.from(req.params.flags, <span class="string">&#x27;base64&#x27;</span>).toString();</span><br><span class="line"> RegexEr.process(params.pattern, params.flags, params.input)</span><br><span class="line"> .then(<span class="function">(<span class="params">result</span>) =&gt;</span> res.status(<span class="number">200</span>).send(&#123;<span class="attr">result</span>: result&#125;))</span><br><span class="line"> .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> res.status(<span class="number">400</span>).send(&#123; <span class="attr">error</span>: err.message &#125;));</span><br><span class="line"></span><br><span class="line"> &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line"> <span class="built_in">console</span>.error(ex);</span><br><span class="line"> res.status(<span class="number">400</span>).send(<span class="built_in">JSON</span>.stringify(ex));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></details><details><summary>index.js</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">&#x27;./api&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function">(<span class="params">reason, promise</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;Unhandled Rejection at:&#x27;</span>, reason.stack || reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.on(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"> res.header(<span class="string">&#x27;Server&#x27;</span>, <span class="string">&#x27;dunno&#x27;</span>);</span><br><span class="line"> res.header(<span class="string">&#x27;X-Powered-By&#x27;</span>, <span class="string">&#x27;love &lt;3&#x27;</span>);</span><br><span class="line"> res.header(<span class="string">&#x27;Level&#x27;</span>, (<span class="number">9000</span> + <span class="built_in">Math</span>.random() * <span class="number">1000</span>).toFixed(<span class="number">0</span>));</span><br><span class="line"> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Static</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;dist&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//rest</span></span><br><span class="line">app.use(<span class="string">&#x27;/api&#x27;</span>, api);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Troll</span></span><br><span class="line">app.use(<span class="string">&#x27;/admin&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> res.status(<span class="number">401</span>).send();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">&#x27;/phpMyAdmin&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> res.status(<span class="number">402</span>).send();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">&#x27;/test.php&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> res.status(<span class="number">403</span>).send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Custom 404</span></span><br><span class="line">app.get(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"> res.status(<span class="number">404</span>).send(<span class="string">&#x27;notfound.jpeg&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`Listening...`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></details><details><summary>leftover.js</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utility</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">require</span>(<span class="params">resource</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>)=&gt;</span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> <span class="built_in">module</span> = <span class="built_in">require</span>(resource);</span><br><span class="line"> <span class="keyword">return</span> res(<span class="built_in">module</span>);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line"> <span class="keyword">return</span> rej(ex);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">isRunningOnWindows</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> process.platform.indexOf(<span class="string">&#x27;win&#x27;</span> === <span class="number">0</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">getUrlHost</span>(<span class="params">url</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> URL(url).hostname;</span><br><span class="line"> &#125; <span class="keyword">catch</span>(ex)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LEGACY_UTILS = <span class="keyword">new</span> Utility();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = LEGACY_UTILS;</span><br></pre></td></tr></table></figure></details><details><summary>regexer.js</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sfs = <span class="built_in">require</span>(<span class="string">&#x27;./simple-fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LOGFILE = <span class="string">&#x27;requests.log&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexEr</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.simpleFs = sfs;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">process</span>(<span class="params">pattern, flags, input</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">`var _result = &#x27;<span class="subst">$&#123;input&#125;</span>&#x27;.match(/<span class="subst">$&#123;pattern&#125;</span>/<span class="subst">$&#123;flags&#125;</span>); return _result;`</span>;</span><br><span class="line"> <span class="built_in">this</span>.addLogLine(LOGFILE, str + <span class="string">&#x27;\</span></span><br><span class="line"><span class="string">&#x27;</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(str);</span><br><span class="line"> <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(str);</span><br><span class="line"> <span class="keyword">var</span> result = fun.call(<span class="built_in">this</span>);</span><br><span class="line"> res(result);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line"> rej(ex);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">addLogLine</span>(<span class="params">logFile, content</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.simpleFs.appendFile(logFile, content);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> REGEXER_INSTANCE = <span class="keyword">new</span> RegexEr();</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = REGEXER_INSTANCE;</span><br></pre></td></tr></table></figure></details><details><summary>simple-fs.js</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> LEGACY_UTILS = <span class="built_in">require</span>(<span class="string">&#x27;./leftover&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFs</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">exists</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"> fs.stat(path, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) <span class="keyword">return</span> rej(err);</span><br><span class="line"> <span class="keyword">if</span> (!stats.isFile()) <span class="keyword">return</span> rej(<span class="string">&#x27;Not a file&#x27;</span>);</span><br><span class="line"> <span class="keyword">return</span> res();</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">readFile</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span> rej(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line"> fs.readFile(path, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) <span class="keyword">return</span> rej(err);</span><br><span class="line"> <span class="keyword">return</span> res(data);</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">readFileSync</span>(<span class="params">path</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span> rej(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> fs.readFileSync(path, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">writeFile</span>(<span class="params">path, contents</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (fs.existsSync(path)) <span class="keyword">return</span> rej(<span class="string">&#x27;File already exists&#x27;</span>);</span><br><span class="line"> fs.writeFile(path, contents, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) <span class="keyword">return</span> rej(err);</span><br><span class="line"> <span class="keyword">return</span> res();</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">writeFileSync</span>(<span class="params">path, contents</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (fs.existsSync(path)) <span class="keyword">return</span> rej(<span class="string">&#x27;File already exists&#x27;</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> fs.writeFileSync(path, contents, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">appendFile</span>(<span class="params">path, contents</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span> rej(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line"> fs.appendFile(path, contents, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (err) <span class="keyword">return</span> rej(err);</span><br><span class="line"> <span class="keyword">return</span> res();</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> <span class="function"><span class="title">appendFileSync</span>(<span class="params">path, contents</span>)</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (!fs.existsSync(path)) <span class="keyword">return</span> rej(<span class="string">&#x27;File not found&#x27;</span>);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> fs.appendFileSync(path, contents, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf-8&#x27;</span> &#125;);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = SimpleFs;</span><br></pre></td></tr></table></figure></details><p><code>regexer.js</code> 中可以看到:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">`var _result = &#x27;<span class="subst">$&#123;input&#125;</span>&#x27;.match(/<span class="subst">$&#123;pattern&#125;</span>/<span class="subst">$&#123;flags&#125;</span>); return _result;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(str);</span><br><span class="line"><span class="keyword">var</span> result = fun.call(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure><p>果然沒有驗證使用者輸入.</p><p><code>leftover.js</code> 中有 <code>LEGACY_UTILS = new Utility();</code>, 可以利用.</p><p><img src="4023224da4e49318ec26a46e5660ebd20a062c5d.png" alt=""></p><p>更進一步, 拿到 Flag.</p><p><img src="366485a0065f211ae8f7cdde0ec2cf27cb15ff0c.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CyberSecurityRumble CTF 2020 已經過去幾周了, 因個人能力問題, 我沒能拿到多少 Flag. 不過部落格也長草許久, 今天就回顧一下其中的一個挑戰 —— CyberSecurityREGEX.&lt;/p&gt;</summary>
    
    
    
    <category term="資安技術" scheme="https://blog.7in0.me/categories/%E8%B3%87%E5%AE%89%E6%8A%80%E8%A1%93/"/>
    
    
    <category term="Flag Hunter" scheme="https://blog.7in0.me/tags/Flag-Hunter/"/>
    
  </entry>
  
  <entry>
    <title>Http 訊息簽章</title>
    <link href="https://blog.7in0.me/2020/10/29/signing-http-messages/"/>
    <id>https://blog.7in0.me/2020/10/29/signing-http-messages/</id>
    <published>2020-10-29T15:41:37.000Z</published>
    <updated>2021-10-04T13:26:45.190Z</updated>
    
    <content type="html"><![CDATA[<p>雖然曾經盛行的 Web Service (SOAP / WDSL) 有對驗證與授權制訂標準, 但是隨著技術的進步, 相關技術已被多數從業者掃進歷史的垃圾堆. 因此造成了當下 Web API 通訊安全相關設計百花齊放群魔亂舞的狀況.</p><p>尤其是需要對引數進行重新排序的設計, 更是罪惡滔天, 搞到 Web 民怨聲載道.</p><p>W3C 此前對 <a href="https://tools.ietf.org/html/draft-cavage-http-signatures-12">一份 Draft</a> 做了<a href="https://tools.ietf.org/html/draft-ietf-httpbis-message-signatures-00">更新</a>, 可以說是一種適用範圍非常廣的驗證與授權方法了.</p><span id="more"></span><h3 id="格式">格式</h3><p>此 Draft 允許將簽章放在 <code>Signature</code> 標頭或 <code>Authorization</code> 標頭中.</p><p>若採用 <code>Signature</code> 標頭, 則格式如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Signature</span><span class="punctuation">: </span>&lt;keyId&gt; [algorithm] [created] [expires] [headers] &lt;signature&gt;</span><br></pre></td></tr></table></figure><p>其中, 必須有 <code>keyId</code> 和 <code>signature</code>.</p><table><thead><tr><th>Directives</th><th>說明</th></tr></thead><tbody><tr><td>algorithm</td><td>演算法, 可選 <code>hs2019</code>, <code>rsa-*</code>, <code>hmac-*</code>, <code>ecdsa-*</code>. <code>*</code> 為 <code>sha256</code> 或 <code>sha512</code>. 不建議顯示指定演算法.</td></tr><tr><td>created</td><td>簽署時間 (Unix timestamp)</td></tr><tr><td>expires</td><td>失效時間 (Unix timestamp)</td></tr><tr><td>headers</td><td>標頭陣列</td></tr><tr><td>signature</td><td>簽章 (採用 Base64 編碼)</td></tr></tbody></table><p>例如:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Signature</span><span class="punctuation">: </span>keyId=&quot;test-key-b&quot;, algorithm=&quot;rsa-sha256&quot;,</span><br><span class="line">           created=1402170695, expires=1402170995,</span><br><span class="line">           headers=&quot;(request-target) (created) host date cache-control x-emptyheader x-example&quot;,</span><br><span class="line">           signature=&quot;T1l3tWH2cSP31nfuvc3nVaHQ6IAu9YLEXg2pCeEOJETXnlWbgKtBTaXV6LNQWtf4O42V2DZwDZbmVZ8xW3TFW80RrfrY0+fyjD4OLN7/zV6L6d2v7uBpuWZ8QzKuHYFaRNVXgFBXN3VJnsIOUjv20pqZMKO3phLCKX2/zQzJLCBQvF/5UKtnJiMp1ACNhG8LF0Q0FPWfe86YZBBxqrQr5WfjMu0LOO52ZAxi9KTWSlceJ2U361gDb7S5Deub8MaDrjUEpluphQeo8xyvHBoNXsqeax/WaHyRYOgaW6krxEGVaBQAfA2czYZhEA05Tb38ahq/gwDQ1bagd9rGnCHtAg==&quot;</span><br></pre></td></tr></table></figure><p>若採用 <code>Authorization</code> 標頭, 則格式如下:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Authorization</span><span class="punctuation">: </span>Signature &lt;keyId&gt; [algorithm] [created] [expires] [headers] &lt;signature&gt;</span><br></pre></td></tr></table></figure><h3 id="簽署">簽署</h3><ol><li>建立 <code>(request-target)</code>, <code>(created)</code> 等標頭, <code>(request-target)</code> 標頭結構為 <code>&lt;METHOD&gt; &lt;URI&gt;&lt;?Query&gt;</code>. 其中, <code>METHOD</code> (請求方法) 為小寫</li><li>根據需要新增標頭到 <code>headers</code> 陣列</li><li>建立登入字串, 結構為 <code>&lt;header&gt;: &lt;value&gt;\n</code>, 按 <code>headers</code> 陣列的順序排列, 最後一項不加 <code>\n</code>. 其中, <code>header</code> (標頭名稱) 為小寫</li><li>使用 keyId 指定的簽署金鑰簽署登入字串, 採用 Base64 編碼</li></ol><h3 id="驗證">驗證</h3><ol><li>獲取 <code>headers</code> 陣列</li><li>根據 <code>headers</code> 陣列獲取標頭</li><li>建立登入字串</li><li>使用 keyId 指定的簽署金鑰驗證登入字串</li></ol><h3 id="實作">實作</h3><p>為了方便後續應用, 我將此 Draft 的 .Net 實作放在 <a href="https://github.com/JoyMoe/HttpSig">GitHub</a> 上, 請斧正.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;雖然曾經盛行的 Web Service (SOAP / WDSL) 有對驗證與授權制訂標準, 但是隨著技術的進步, 相關技術已被多數從業者掃進歷史的垃圾堆. 因此造成了當下 Web API 通訊安全相關設計百花齊放群魔亂舞的狀況.&lt;/p&gt;
&lt;p&gt;尤其是需要對引數進行重新排序的設計, 更是罪惡滔天, 搞到 Web 民怨聲載道.&lt;/p&gt;
&lt;p&gt;W3C 此前對 &lt;a href=&quot;https://tools.ietf.org/html/draft-cavage-http-signatures-12&quot;&gt;一份 Draft&lt;/a&gt; 做了&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-message-signatures-00&quot;&gt;更新&lt;/a&gt;, 可以說是一種適用範圍非常廣的驗證與授權方法了.&lt;/p&gt;</summary>
    
    
    
    <category term="網際網路" scheme="https://blog.7in0.me/categories/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.7in0.me/2020/04/29/hello-world/"/>
    <id>https://blog.7in0.me/2020/04/29/hello-world/</id>
    <published>2020-04-29T12:26:00.000Z</published>
    <updated>2021-10-04T13:26:45.190Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="雜物箱" scheme="https://blog.7in0.me/categories/%E9%9B%9C%E7%89%A9%E7%AE%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>Scheme on Racket (一) 起步</title>
    <link href="https://blog.7in0.me/2020/04/06/scheme-on-racket-part-1-startup/"/>
    <id>https://blog.7in0.me/2020/04/06/scheme-on-racket-part-1-startup/</id>
    <published>2020-04-06T05:20:21.000Z</published>
    <updated>2021-10-04T13:26:45.190Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中深感自身內力不足, 遂決定讀 SICP (Structure and Interpretation of Computer Programs) 一書以加強修行.</p><p>因書中程式碼均以 MIT Scheme 編寫, 在讀此書之前還需瞭解 Lisp 的這一方言.</p><p>因 MIT Scheme 已不再維護其 Windows 版, 為了方便我在 macOS 和 Windows 上獲得比較一致的體驗, 我選擇使用 Racket 和 SICP language.</p><p>這個系列就是我學習 Scheme (SICP language on Racket) 的一些筆記.</p><span id="more"></span><p>自然, 在開始學習之前需要先準備工作環境, 我所選擇的軟體如下:</p><ul><li>JupyterLab</li><li>Minimal Racket (也可以使用完整 Racket 發行版)<ul><li>sicp</li><li>iracket</li></ul></li></ul><h3 id="安裝-Racket-和-SICP">安裝 Racket 和 SICP</h3><p>macOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew install minimal-racket</span><br><span class="line">$ raco pkg install sicp</span><br></pre></td></tr></table></figure><p>Windows:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; scoop install racket<span class="literal">-minimal</span></span><br><span class="line">&gt; raco pkg install sicp</span><br></pre></td></tr></table></figure><h3 id="安裝-JupyterLab-和-iracket">安裝 JupyterLab 和 iracket</h3><p>因當前版本的 iracket 不支援選擇語言, 所以在通過 raco pkg 安裝好之後需要到 <a href="https://github.com/kinosang/iracket">kinosang/iracket</a> 獲取修改版的 <code>install.rkt</code> 和 <code>iracket.rkt</code> 並替換到本地.</p><p>macOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ brew install jupyterlab</span><br><span class="line">$ raco pkg install iracket</span><br><span class="line"><span class="comment"># mac 上 raco pkgs 在 /usr/local/opt/minimal-racket/share/racket/pkgs</span></span><br><span class="line">$ raco iracket install -l sicp</span><br></pre></td></tr></table></figure><p>Windows:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; pip install jupyterlab <span class="comment"># 先用 scoop 安裝 python</span></span><br><span class="line">&gt; raco pkg install iracket</span><br><span class="line"><span class="comment"># win 上 raco pkgs 在 %APPDATA%\Racket\7.4\pkgs</span></span><br><span class="line">&gt; raco iracket install raco iracket install -<span class="literal">-jupyter</span><span class="literal">-exe</span> <span class="variable">$env:HOME</span>\scoop\apps\python\current\Scripts\jupyter.exe <span class="literal">-l</span> sicp</span><br></pre></td></tr></table></figure><h3 id="測試-iracket">測試 iracket</h3><p>分別使用 racket kernel 和 sicp kernel 進行測試.</p><h4 id="Racket">Racket</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">require</span> <span class="number">2</span>htdp/image) <span class="comment">; draw a picture</span></span><br><span class="line">(<span class="name">let</span> sierpinski ([n <span class="number">8</span>])</span><br><span class="line">  (<span class="name">cond</span></span><br><span class="line">    [(<span class="name">zero</span>? n) (<span class="name">triangle</span> <span class="number">2</span> &#x27;solid &#x27;red)]</span><br><span class="line">    [else (<span class="name">define</span> <span class="literal">t</span> (<span class="name">sierpinski</span> (<span class="name">-</span> n <span class="number">1</span>)))</span><br><span class="line">          (<span class="name">freeze</span> (<span class="name">above</span> <span class="literal">t</span> (<span class="name">beside</span> <span class="literal">t</span> <span class="literal">t</span>)))]))</span><br></pre></td></tr></table></figure><p><img src="c977d83335ebefeb667f3932375f44dd5514cadc.png" alt=""></p><h4 id="SICP">SICP</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name">inc</span> <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">(<span class="name">runtime</span>)</span><br></pre></td></tr></table></figure><p><img src="aa8df7934589ebc45abaafb1df9cdb4ed0d792a6.png" alt=""></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近工作中深感自身內力不足, 遂決定讀 SICP (Structure and Interpretation of Computer Programs) 一書以加強修行.&lt;/p&gt;
&lt;p&gt;因書中程式碼均以 MIT Scheme 編寫, 在讀此書之前還需瞭解 Lisp 的這一方言.&lt;/p&gt;
&lt;p&gt;因 MIT Scheme 已不再維護其 Windows 版, 為了方便我在 macOS 和 Windows 上獲得比較一致的體驗, 我選擇使用 Racket 和 SICP language.&lt;/p&gt;
&lt;p&gt;這個系列就是我學習 Scheme (SICP language on Racket) 的一些筆記.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
    <category term="Scheme on Racket" scheme="https://blog.7in0.me/tags/Scheme-on-Racket/"/>
    
    <category term="SICP" scheme="https://blog.7in0.me/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>在 Windows 上編譯 PHP 擴充套件</title>
    <link href="https://blog.7in0.me/2020/03/29/build-php-extension-on-windows/"/>
    <id>https://blog.7in0.me/2020/03/29/build-php-extension-on-windows/</id>
    <published>2020-03-29T06:44:29.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天需要在 Windows 上安裝 php-zmq 擴充套件, 奈何尋遍網路找不到為 PHP 7.4 編譯好的 DLL, 只好自行編譯.</p><p>編譯過程參考了 <em>Build your own PHP on Windows</em><a href="https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2">^1</a> 和 <em>How to build PHP Extension on Windows</em><a href="https://medium.com/@erinus/how-to-build-php-extension-on-windows-d1667290f809">^2</a>.</p><span id="more"></span><h3 id="準備工作">準備工作</h3><ol><li>首先需要安裝 Visual C++ Build Tools 2017.</li></ol><p>從 <code>https://aka.ms/vs/15/release/vs_buildtools.exe</code> 下載安裝檔案.</p><p>執行下面的指令進行安裝.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; .\vs_buildtools.exe -<span class="literal">-quiet</span> -<span class="literal">-wait</span> -<span class="literal">-norestart</span> -<span class="literal">-nocache</span> -<span class="literal">-installPath</span> C:\BuildTools -<span class="literal">-add</span>  Microsoft.VisualStudio.Workload.VCTools</span><br></pre></td></tr></table></figure><p><em>上述指令系自動安裝, 不會顯示任何視窗, 如需瞭解安裝進度可將 --quiet 刪掉</em></p><ol start="2"><li>下載 <a href="https://github.com/Microsoft/php-sdk-binary-tools">PHP-SDK</a> 並解壓縮, 目錄結構如下.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php-sdk</span><br><span class="line"> |-bin</span><br><span class="line"> |-lib</span><br><span class="line"> |-msys2</span><br><span class="line"> |-pgo</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><ol start="3"><li>準備 SDK</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; .\phpsdk<span class="literal">-starter</span>.bat <span class="literal">-c</span> vc15 <span class="literal">-a</span> x64</span><br><span class="line"><span class="variable">$</span> phpsdk_buildtree php<span class="literal">-dev</span></span><br></pre></td></tr></table></figure><ol start="4"><li>下載 <a href="https://windows.php.net/download/">PHP 程式碼</a> 並解壓縮, 目錄結構如下.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">php-sdk</span><br><span class="line"> |-vc15</span><br><span class="line">    |-x64</span><br><span class="line">      |-php-7.4.4-src</span><br></pre></td></tr></table></figure><ol start="5"><li>準備程式庫</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> vc15\x64\php-7.4.4-src</span><br><span class="line">$ phpsdk_deps -u</span><br><span class="line">...</span><br><span class="line">Updates performed successfully.</span><br></pre></td></tr></table></figure><ol start="6"><li>編譯 PHP</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ buildconf</span><br><span class="line">$ configure --disable-all --enable-cli <span class="comment"># ZTS, 若需 NTS 使用下面一行</span></span><br><span class="line">$ configure --disable-all --enable-cli --disable-zts <span class="comment"># NTS, 若需 ZTS 使用上面一行</span></span><br><span class="line">...</span><br><span class="line">Type ‘nmake’ to build PHP</span><br><span class="line">$ nmake</span><br></pre></td></tr></table></figure><h3 id="編譯擴充套件">編譯擴充套件</h3><ol><li>下載 <a href="https://github.com/zeromq/php-zmq">PHP-ZMQ 程式碼</a> 並解壓縮, 目錄結構如下.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">php-sdk</span><br><span class="line"> |-vc15</span><br><span class="line">    |-x64</span><br><span class="line">      |-php-7.4.4-src</span><br><span class="line">        |-ext</span><br><span class="line">          |-zmq</span><br><span class="line">            |-config.m4</span><br><span class="line">            |-config.w32</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><ol start="2"><li>下載 <a href="https://zeromq.org/download/">ZeroMQ 程式碼</a> 和 <a href="https://zeromq.org/download/">ZeroMQ Visual Studio 15 2017 x64</a> 並解壓縮, 目錄結構如下.</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">php-sdk</span><br><span class="line"> |-vc15</span><br><span class="line">    |-x64</span><br><span class="line">      |-deps</span><br><span class="line">        |-bin</span><br><span class="line">          |-libzmq-v141-mt-4_3_2.dll</span><br><span class="line">        |-include</span><br><span class="line">          |-zmq.h</span><br><span class="line">        |-lib</span><br><span class="line">          |-libzmq.lib &lt;- libzmq-v141-mt-4_3_2.lib</span><br></pre></td></tr></table></figure><ol start="3"><li>編譯 PHP-ZMQ</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nmake clean</span><br><span class="line">$ buildconf --force <span class="comment"># 重建 configure, 新增 --with-zmq</span></span><br><span class="line">$ configure --disable-all --enable-cli --with-zmq=shared <span class="comment"># ZTS, 若需 NTS 使用下面一行</span></span><br><span class="line">$ configure --disable-all --enable-cli --with-zmq=shared --disable-zts <span class="comment"># NTS, 若需 ZTS 使用上面一行</span></span><br><span class="line">...</span><br><span class="line">Type ‘nmake’ to build PHP</span><br><span class="line">$ nmake</span><br></pre></td></tr></table></figure><p>編譯成功的 <code>php_zmq.dll</code> 在:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php-sdk\php-dev\vc15\x64\php-7.4.4-src\x64\Release_TS\php_zmq.dll <span class="comment"># ZTS</span></span><br><span class="line">php-sdk\php-dev\vc15\x64\php-7.4.4-src\x64\Release\php_zmq.dll <span class="comment">#NTS</span></span><br></pre></td></tr></table></figure><p><em>編譯成果在 <a href="https://github.com/zeromq/php-zmq/issues/193#issuecomment-605456811">zeromq/php-zmq#193</a></em></p><h3 id="使用擴充套件">使用擴充套件</h3><p>將 <code>php_zmq.dll</code> 放到 <code>php/ext</code>, 將 <code>libzmq-v141-mt-4_3_2.dll</code> 放到 <code>php</code>, 然後在 <code>php.ini</code> 新增:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extension</span>=zmq</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前幾天需要在 Windows 上安裝 php-zmq 擴充套件, 奈何尋遍網路找不到為 PHP 7.4 編譯好的 DLL, 只好自行編譯.&lt;/p&gt;
&lt;p&gt;編譯過程參考了 &lt;em&gt;Build your own PHP on Windows&lt;/em&gt;&lt;a href=&quot;https://wiki.php.net/internals/windows/stepbystepbuild_sdk_2&quot;&gt;^1&lt;/a&gt; 和 &lt;em&gt;How to build PHP Extension on Windows&lt;/em&gt;&lt;a href=&quot;https://medium.com/@erinus/how-to-build-php-extension-on-windows-d1667290f809&quot;&gt;^2&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>Asp.Net Core MVC 中文在地化問題</title>
    <link href="https://blog.7in0.me/2019/10/13/aspnet-core-mvc-chinese-localization-problem/"/>
    <id>https://blog.7in0.me/2019/10/13/aspnet-core-mvc-chinese-localization-problem/</id>
    <published>2019-10-13T13:22:45.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://Asp.Net">Asp.Net</a> Core MVC 提供了非常方便的在地化工具<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization">^1</a>, 但是此工具在處理中文時存在一個問題.</p><p>眾所周知, 中文存在多個不同的 <code>Culture</code><a href="https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo">^2</a>, 常見“語種”如下表, 這些 <code>Culture</code> 分為 <code>Neutral</code> 和 <code>Specific</code> 兩種型別.</p><table>    <tbody>        <tr>            <th>繁體字</th>            <td>zh-TW</td>            <td>zh-CHT<sup>*</sup></td>            <td>zh-Hant-TW</td>            <td>zh-Hant<sup>*</sup></td>            <td rowspan="2">zh<sup>*</sup></td>        </tr>        <tr>            <th>簡體字</th>            <td>zh-CN</td>            <td>zh-CHS<sup>*</sup></td>            <td>zh-Hans-CN</td>            <td>zh-Hans<sup>*</sup></td>        </tr>    </tbody></table><p><em>標星的屬於 <code>Neutral</code> 型別</em></p><p>而因歷史遺留問題, 瀏覽器傳送的 <code>Accept-Language</code> header 可能為上述 <code>Culture</code> 中的一種或多種, 但 <a href="http://Asp.Net">Asp.Net</a> MVC 提供的 fallback 機制不能正確 fallback 部分 <code>Culture</code><a href="https://github.com/aspnet/AspNetCore/issues/2634">^3</a>.</p><span id="more"></span><p>多方調查後發現, 首先要修正 fallback 相關程式碼, 使 fallback 通過 <code>CultureInfo.Parent</code> 向前查詢, 而非使用字串剪下<a href="https://github.com/aspnet/AspNetCore/issues/14452">^5</a>.</p><p>在此基礎上, 因為 Linux 系統上 <code>zh-CN</code> 和 <code>zh-TW</code> 是“別名”, .Net Core 不能正確處理別名<a href="https://github.com/dotnet/coreclr/issues/23252#issuecomment-473994613">^6</a>, 所以需要額外增加程式碼進行處理<a href="https://github.com/aspnet/AspNetCore/issues/14558">^7</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.Use((context, next) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    context.Request.Headers[<span class="string">&quot;Accept-Language&quot;</span>] = <span class="keyword">new</span> StringValues(context.Request.Headers[<span class="string">&quot;Accept-Language&quot;</span>]</span><br><span class="line">        .Select(lang =&gt; lang.ToLower()</span><br><span class="line">            .Replace(<span class="string">&quot;zh-tw&quot;</span>, <span class="string">&quot;zh-hant-tw&quot;</span>)</span><br><span class="line">            .Replace(<span class="string">&quot;zh-cn&quot;</span>, <span class="string">&quot;zh-hans-cn&quot;</span>)).ToArray());</span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的程式碼必須放在此句之前.</span></span><br><span class="line">app.UseRequestLocalization();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://Asp.Net&quot;&gt;Asp.Net&lt;/a&gt; Core MVC 提供了非常方便的在地化工具&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/localization&quot;&gt;^1&lt;/a&gt;, 但是此工具在處理中文時存在一個問題.&lt;/p&gt;
&lt;p&gt;眾所周知, 中文存在多個不同的 &lt;code&gt;Culture&lt;/code&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo&quot;&gt;^2&lt;/a&gt;, 常見“語種”如下表, 這些 &lt;code&gt;Culture&lt;/code&gt; 分為 &lt;code&gt;Neutral&lt;/code&gt; 和 &lt;code&gt;Specific&lt;/code&gt; 兩種型別.&lt;/p&gt;
&lt;table&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;th&gt;繁體字&lt;/th&gt;
            &lt;td&gt;zh-TW&lt;/td&gt;
            &lt;td&gt;zh-CHT&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
            &lt;td&gt;zh-Hant-TW&lt;/td&gt;
            &lt;td&gt;zh-Hant&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
            &lt;td rowspan=&quot;2&quot;&gt;zh&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;th&gt;簡體字&lt;/th&gt;
            &lt;td&gt;zh-CN&lt;/td&gt;
            &lt;td&gt;zh-CHS&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
            &lt;td&gt;zh-Hans-CN&lt;/td&gt;
            &lt;td&gt;zh-Hans&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;標星的屬於 &lt;code&gt;Neutral&lt;/code&gt; 型別&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;而因歷史遺留問題, 瀏覽器傳送的 &lt;code&gt;Accept-Language&lt;/code&gt; header 可能為上述 &lt;code&gt;Culture&lt;/code&gt; 中的一種或多種, 但 &lt;a href=&quot;http://Asp.Net&quot;&gt;Asp.Net&lt;/a&gt; MVC 提供的 fallback 機制不能正確 fallback 部分 &lt;code&gt;Culture&lt;/code&gt;&lt;a href=&quot;https://github.com/aspnet/AspNetCore/issues/2634&quot;&gt;^3&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>RouterOS DNSPod DDNS 設定</title>
    <link href="https://blog.7in0.me/2019/10/13/dnspod-ddns-on-routeros/"/>
    <id>https://blog.7in0.me/2019/10/13/dnspod-ddns-on-routeros/</id>
    <published>2019-10-13T08:36:37.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>最近開始使用 MikroTik RouterOS, 檢索發現 DNSPod DDNS 設定多依賴某轉發服務<a href="%E4%B8%8D%E9%BB%9E%E5%90%8D%E6%89%B9%E8%A9%95">^1</a>.</p><p>這種行為是十分不安全的, 故自行研究方法.</p><span id="more"></span><p>MikroTik Wiki 中有如何設定 NO-IP DDNS 的說明<a href="https://wiki.mikrotik.com/wiki/Dynamic_DNS_Update_Script_for_No-IP_DNS">^2</a>, 從其程式碼修改即可適配 DNSPod.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##############Script Settings##################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">:local</span> DNSPODTOKENID <span class="string">&quot;DNSPod API Token ID&quot;</span></span><br><span class="line"><span class="keyword">:local</span> DNSPODTOKEN <span class="string">&quot;DNSPod API Token&quot;</span></span><br><span class="line"><span class="keyword">:local</span> DNSPODDOMAIN <span class="string">&quot;DNSPod Domain Name&quot;</span></span><br><span class="line"><span class="keyword">:local</span> DNSPODRECORD <span class="string">&quot;DNSPod Record ID&quot;</span></span><br><span class="line"><span class="keyword">:local</span> DNSPODSUBDOMAIN <span class="string">&quot;DNSPod SubDomain Name&quot;</span></span><br><span class="line"><span class="keyword">:local</span> WANInterface <span class="string">&quot;MikroTik Router WAN Interface Name&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">:local</span> DdnsDomain <span class="string">&quot;<span class="variable">$DNSPODSUBDOMAIN</span>.<span class="variable">$DNSPODDOMAIN</span>&quot;</span></span><br><span class="line"><span class="keyword">:local</span> IpCurrent [<span class="built_in">/ip address </span><span class="builtin-name">get</span> [<span class="builtin-name">find</span> <span class="attribute">interface</span>=<span class="variable">$WANInterface</span>] address];</span><br><span class="line"><span class="keyword">:for</span> i <span class="keyword">from</span>=( [<span class="keyword">:len</span> <span class="variable">$IpCurrent</span>] - 1) <span class="attribute">to</span>=0 <span class="keyword">do</span>=&#123;</span><br><span class="line">  <span class="keyword">:if</span> ( [<span class="keyword">:pick</span> <span class="variable">$IpCurrent</span> <span class="variable">$i</span>] = <span class="string">&quot;/&quot;</span>) <span class="keyword">do</span>=&#123;</span><br><span class="line">    <span class="keyword">:local</span> NewIP [<span class="keyword">:pick</span> <span class="variable">$IpCurrent</span> 0 <span class="variable">$i</span>];</span><br><span class="line">    <span class="keyword">:if</span> ([<span class="keyword">:resolve</span> <span class="variable">$DdnsDomain</span>] != <span class="variable">$NewIP</span>) <span class="keyword">do</span>=&#123;</span><br><span class="line">      <span class="built_in">/tool </span>fetch <span class="attribute">mode</span>=https <span class="attribute">url</span>=<span class="string">&quot;https://dnsapi.cn/Record.Ddns&quot;</span> <span class="attribute">http-data</span>=<span class="string">&quot;login_token=<span class="variable">$DNSPODTOKENID</span>%2C<span class="variable">$DNSPODTOKEN</span>&amp;domain=<span class="variable">$DNSPODDOMAIN</span>&amp;record_id=<span class="variable">$DNSPODRECORD</span>&amp;sub_domain=<span class="variable">$DNSPODSUBDOMAIN</span>&amp;record_line_id=0&amp;value=<span class="variable">$NewIP</span>&quot;</span> <span class="attribute">keep-result</span>=<span class="literal">no</span></span><br><span class="line">      <span class="keyword">:log</span> <span class="builtin-name">info</span> <span class="string">&quot;NO-IP Update: <span class="variable">$DdnsDomain</span> - <span class="variable">$NewIP</span>&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>雖然可以通過 RouterOS Schedule 定時執行上述程式碼, 但是這種方法一點也不優雅.</p><p>經過搜尋發現, 可以利用 PPP Profile 的 ON-UP Script<a href="https://forum.mikrotik.com/viewtopic.php?t=124990">^3</a>.</p><p>於是將上述程式碼放到 <code>pppoe-out1</code> 使用的 profile 中, 並在開頭新增 <code>:delay 10</code>.</p><p>這樣每次 PPPoE 撥號成功就會自動更新 DDNS 了.</p><p><em>同理, WIKI 上 NO-IP 的程式碼也可以放在這裡使用.</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近開始使用 MikroTik RouterOS, 檢索發現 DNSPod DDNS 設定多依賴某轉發服務&lt;a href=&quot;%E4%B8%8D%E9%BB%9E%E5%90%8D%E6%89%B9%E8%A9%95&quot;&gt;^1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;這種行為是十分不安全的, 故自行研究方法.&lt;/p&gt;</summary>
    
    
    
    <category term="網際網路" scheme="https://blog.7in0.me/categories/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 18.04 安裝設定 IKEv2</title>
    <link href="https://blog.7in0.me/2019/06/02/setup-ikev2-with-strongswan-on-ubuntu-18-04/"/>
    <id>https://blog.7in0.me/2019/06/02/setup-ikev2-with-strongswan-on-ubuntu-18-04/</id>
    <published>2019-06-02T15:04:09.000Z</published>
    <updated>2021-10-04T13:26:45.190Z</updated>
    
    <content type="html"><![CDATA[<p>前幾天需要在公司辦公室設定 IKEv2 VPN, 於是在伺服器上建立了一個 Ubuntu 18.04 LXC 容器, 分配 IP 地址 <code>10.0.0.3</code>.</p><p>因伺服器在辦公室路徑器和防火牆後面, 所以需要先在防火牆上開放 <code>500/UDP</code>, <code>4500/UDP</code> 和 <code>ESP (Protocol 50)</code>, 並在路徑器上將 <code>500/UDP</code>, <code>4500/UDP</code> 和 <code>ESP</code> 轉發給 <code>10.0.0.3</code>.</p><span id="more"></span><h3 id="安裝-StrongSwan">安裝 StrongSwan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install strongswan libcharon-extra-plugins <span class="comment"># strongswan-plugin-dhcp 已被 libcharon-extra-plugins 取代</span></span><br></pre></td></tr></table></figure><h3 id="設定-StrongSwan">設定 StrongSwan</h3><p>需要將 <code>server-cert.crt</code> 放入 <code>/etc/ipsec.d/certs/</code>, 將 <code>server-key.pem</code> 放入 <code>/etc/ipsec.d/private/</code>, 將 CA 放入 <code>/etc/ipsec.d/cacerts/</code>.</p><p><em>注意：server-cert.crt 需要具備 Digital Signature, Key Encipherment, serverAuth 和 ikeIntermediate 屬性</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ipsec.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">config</span> setup</span><br><span class="line">    charondebug=<span class="string">&quot;ike 2, knl 2, cfg 2, net 2, esp 2, dmn 2, mgr 2&quot;</span></span><br><span class="line">    uniqueids=<span class="literal">no</span></span><br><span class="line"></span><br><span class="line">conn %default</span><br><span class="line">    keyexchange=ikev2</span><br><span class="line"></span><br><span class="line">    ike=aes128-sha1-modp1024,aes128-sha1-modp1536,aes128-sha1-modp2048,aes128-sha256-ecp256,aes128-sha256-modp1024,aes128-sha256-modp1536,aes128-sha256-modp2048,aes256-aes128-sha256-sha1-modp2048-modp4096-modp1024,aes256-sha1-modp1024,aes256-sha256-modp1024,aes256-sha256-modp1536,aes256-sha256-modp2048,aes256-sha256-modp4096,aes256-sha384-ecp384,aes256-sha384-modp1024,aes256-sha384-modp1536,aes256-sha384-modp2048,aes256-sha384-modp4096,aes256gcm16-aes256gcm12-aes128gcm16-aes128gcm12-sha256-sha1-modp2048-modp4096-modp1024,3des-sha1-modp1024!</span><br><span class="line">    esp=aes128-aes256-sha1-sha256-modp2048-modp4096-modp1024,aes128-sha1,aes128-sha1-modp1024,aes128-sha1-modp1536,aes128-sha1-modp2048,aes128-sha256,aes128-sha256-ecp256,aes128-sha256-modp1024,aes128-sha256-modp1536,aes128-sha256-modp2048,aes128gcm12-aes128gcm16-aes256gcm12-aes256gcm16-modp2048-modp4096-modp1024,aes128gcm16,aes128gcm16-ecp256,aes256-sha1,aes256-sha256,aes256-sha256-modp1024,aes256-sha256-modp1536,aes256-sha256-modp2048,aes256-sha256-modp4096,aes256-sha384,aes256-sha384-ecp384,aes256-sha384-modp1024,aes256-sha384-modp1536,aes256-sha384-modp2048,aes256-sha384-modp4096,aes256gcm16,aes256gcm16-ecp384,3des-sha1!</span><br><span class="line"></span><br><span class="line">    dpdaction=clear</span><br><span class="line">    dpddelay=<span class="number">300s</span></span><br><span class="line">    rekey=<span class="literal">no</span></span><br><span class="line"></span><br><span class="line">    fragmentation=<span class="literal">yes</span></span><br><span class="line">    forceencaps=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    left=%any</span><br><span class="line">    leftid=@&lt;your-server-hostname&gt;</span><br><span class="line">    leftcert=server-cert.pem</span><br><span class="line">    leftsendcert=always</span><br><span class="line">    leftsubnet=<span class="number">10.0.0.0</span>/<span class="number">24</span> <span class="comment"># NAT</span></span><br><span class="line">    <span class="comment"># leftsubnet=0.0.0.0/0</span></span><br><span class="line">    leftfirewall=<span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    right=%any</span><br><span class="line">    rightid=%any</span><br><span class="line">    rightauth=eap-mschapv2</span><br><span class="line">    rightsourceip=<span class="number">10.0.1.0</span>/<span class="number">24</span></span><br><span class="line">    <span class="comment"># rightsourceip=%dhcp</span></span><br><span class="line">    rightsubnet=<span class="number">10.0.1.0</span>/<span class="number">24</span></span><br><span class="line">    rightdns=<span class="number">10.0.0.1</span></span><br><span class="line">    rightsendcert=never</span><br><span class="line"></span><br><span class="line">    compress=<span class="literal">no</span></span><br><span class="line">    type=tunnel</span><br><span class="line"></span><br><span class="line">conn IPSec-IKEv2</span><br><span class="line">    keyexchange=ikev2</span><br><span class="line">    auto=add</span><br><span class="line"></span><br><span class="line">    eap_identity=%any</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ipsec.secrets</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">: <span class="attribute">RSA</span> <span class="string">&quot;server-key.pem&quot;</span></span><br><span class="line">vpn : EAP <span class="string">&quot;vpn&quot;</span> <span class="comment"># 使用者名稱和密碼</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="啟動-StrongSwan">啟動 StrongSwan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start strongswan</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> strongswan</span><br></pre></td></tr></table></figure><h3 id="設定轉發">設定轉發</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw allow from 10.0.0.0/24 to any port 22 <span class="comment"># 只允許辦公室訪問 SSH</span></span><br><span class="line">$ sudo ufw allow 500,4500/udp <span class="comment"># 允許 ISAKMP, NAT-T</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ufw/sysctl.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">net/ipv4/ip_forward=1</span><br><span class="line">...</span><br><span class="line">net/ipv4/conf/all/accept_redirects=0</span><br><span class="line">...</span><br><span class="line">net/ipv4/conf/all/send_redirects=0</span><br><span class="line">...</span><br><span class="line">net/ipv4/ip_no_pmtu_disc=1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ufw/before.rules</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># rules.before</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Rules that should be run before the ufw command line added rules. Custom</span></span><br><span class="line"><span class="comment"># rules should be added to one of these chains:</span></span><br><span class="line"><span class="comment">#   ufw-before-input</span></span><br><span class="line"><span class="comment">#   ufw-before-output</span></span><br><span class="line"><span class="comment">#   ufw-before-forward</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增 nat 和 mangle</span></span><br><span class="line"></span><br><span class="line">*<span class="attribute">nat</span></span><br><span class="line">-A POSTROUTING -s <span class="number">10.0.1.0</span>/<span class="number">24</span> -o eth0 -m policy --pol ipsec --dir out -j ACCEPT</span><br><span class="line">-A POSTROUTING -s <span class="number">10.0.1.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE</span><br><span class="line">COMMIT</span><br><span class="line"></span><br><span class="line">*mangle</span><br><span class="line">-A FORWARD --match policy --pol ipsec --dir in -s <span class="number">10.0.1.0</span>/<span class="number">24</span> -o eth0 -p tcp -m tcp --tcp-flags SYN,RST SYN -m tcpmss --mss <span class="number">1361</span>:<span class="number">1536</span> -j TCPMSS --set-mss <span class="number">1360</span></span><br><span class="line">COMMIT</span><br><span class="line">...</span><br><span class="line">*filter</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 新增 filter 策略</span></span><br><span class="line">-A ufw-before-forward --match policy --pol ipsec --dir in --proto esp -s <span class="number">10.0.1.0</span>/<span class="number">24</span> -j ACCEPT</span><br><span class="line">-A ufw-before-forward --match policy --pol ipsec --dir out --proto esp -d <span class="number">10.0.1.0</span>/<span class="number">24</span> -j ACCEPT</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><h3 id="DNS-問題">DNS 問題</h3><p>因為前文設定 <code>leftsubnet=10.0.0.0/24</code>, 在 iOS 和 macOS 上 <code>rightdns=10.0.0.1</code> 不起作用,<br>所以需要通過 <code>attr</code> 外掛來使內網域名正常解析.</p><p><em><code>leftsubnet=0.0.0.0/0</code> 時所有網路通訊都會通過 VPN</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/ipsec.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="comment"># check out /etc/strongswan.d/charon/attr.conf</span></span><br><span class="line">    <span class="comment"># rightdns=10.0.0.1</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/strongswan.d/charon/attr.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Section to specify arbitrary attributes that are assigned to a peer via</span></span><br><span class="line"><span class="comment"># configuration payload (CP).</span></span><br><span class="line"><span class="section">attr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># &lt;attr&gt; is an attribute name or an integer, values can be an IP address,</span></span><br><span class="line">    <span class="comment"># subnet or arbitrary value.</span></span><br><span class="line">    <span class="comment"># &lt;attr&gt; =</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># https://www.iana.org/assignments/ikev2-parameters/ikev2-parameters.xhtml#ikev2-parameters-21</span></span><br><span class="line">    <span class="comment"># INTERNAL_DNS_DOMAIN</span></span><br><span class="line">    25 = <span class="attribute">joy</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># internal dns server</span></span><br><span class="line">    dns = <span class="number">10.0.0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Whether to load the plugin. Can also be an integer to increase the</span></span><br><span class="line">    <span class="comment"># priority of this plugin.</span></span><br><span class="line">    load = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;前幾天需要在公司辦公室設定 IKEv2 VPN, 於是在伺服器上建立了一個 Ubuntu 18.04 LXC 容器, 分配 IP 地址 &lt;code&gt;10.0.0.3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;因伺服器在辦公室路徑器和防火牆後面, 所以需要先在防火牆上開放 &lt;code&gt;500/UDP&lt;/code&gt;, &lt;code&gt;4500/UDP&lt;/code&gt; 和 &lt;code&gt;ESP (Protocol 50)&lt;/code&gt;, 並在路徑器上將 &lt;code&gt;500/UDP&lt;/code&gt;, &lt;code&gt;4500/UDP&lt;/code&gt; 和 &lt;code&gt;ESP&lt;/code&gt; 轉發給 &lt;code&gt;10.0.0.3&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="網際網路" scheme="https://blog.7in0.me/categories/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Asp.Net Core MVC, IdentityServer 和外部登入</title>
    <link href="https://blog.7in0.me/2019/01/18/asp-net-core-mvc-identityserver-and-external-login/"/>
    <id>https://blog.7in0.me/2019/01/18/asp-net-core-mvc-identityserver-and-external-login/</id>
    <published>2019-01-18T15:18:56.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>在已有 <a href="http://Asp.Net">Asp.Net</a> Core MVC (Identity) 專案中新增 IdentityServer 可以通過 Nuget 安裝並新增程式碼, 但直接使用會導致外部登入時出現 404 錯誤.</p><span id="more"></span><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">services</span><br><span class="line">    .AddIdentityServer()</span><br><span class="line">    .AddConfigurationStore(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.ConfigureDbContext = builder =&gt;</span><br><span class="line">            builder.UseSqlServer(connectionString,</span><br><span class="line">                sql =&gt; sql.MigrationsAssembly(migrationsAssembly));</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddOperationalStore(options =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        options.ConfigureDbContext = builder =&gt;</span><br><span class="line">            builder.UseSqlServer(connectionString,</span><br><span class="line">                sql =&gt; sql.MigrationsAssembly(migrationsAssembly));</span><br><span class="line">    &#125;)</span><br><span class="line">    .AddAspNetIdentity&lt;ApplicationUser&gt;();</span><br></pre></td></tr></table></figure><p>外部登入有時會出現 404 錯誤, 發現系 <code>.Identity.External</code> 和 <code>.AspNetCore.Correlation.*</code> Cookies 過大所致, 經調查可使用 SessionStore 解決.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;ITicketStore, CacheTicketStore&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ticketStore = services.BuildServiceProvider().GetService&lt;ITicketStore&gt;();</span><br><span class="line"></span><br><span class="line">services.ConfigureExternalCookie(options =&gt; &#123;</span><br><span class="line">    options.SessionStore = ticketStore;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">services.ConfigureApplicationCookie(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.SessionStore = ticketStore;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>CacheTicketStore</code> 中需要實作下列方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Task&lt;<span class="built_in">string</span>&gt; <span class="title">StoreAsync</span>(<span class="params">AuthenticationTicket ticket</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Task <span class="title">RenewAsync</span>(<span class="params"><span class="built_in">string</span> key, AuthenticationTicket ticket</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Task&lt;AuthenticationTicket&gt; <span class="title">RetrieveAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Task <span class="title">RemoveAsync</span>(<span class="params"><span class="built_in">string</span> key</span>)</span>;</span><br></pre></td></tr></table></figure><p>亦可在建構函式中通過 DI 存取 <code>IMemoryCache</code>, <code>IDistributedCache</code> 服務.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在已有 &lt;a href=&quot;http://Asp.Net&quot;&gt;Asp.Net&lt;/a&gt; Core MVC (Identity) 專案中新增 IdentityServer 可以通過 Nuget 安裝並新增程式碼, 但直接使用會導致外部登入時出現 404 錯誤.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>騰訊雲 CDN 與 WebSocket</title>
    <link href="https://blog.7in0.me/2019/01/13/tencent-cloud-cdn-and-websocket/"/>
    <id>https://blog.7in0.me/2019/01/13/tencent-cloud-cdn-and-websocket/</id>
    <published>2019-01-13T12:27:35.000Z</published>
    <updated>2021-10-04T13:26:45.194Z</updated>
    
    <content type="html"><![CDATA[<p>眾所周知, 騰訊雲 CDN 是支援 WebSocket 的, 但是最近的一個專案中使用 SignalR 時發現在生產環境中 WebSocket 連結總是在聯通 10 秒左右自動斷開, 錯誤程式碼 1006.</p><img src="/2019/01/13/tencent-cloud-cdn-and-websocket/2710675219_869255_1547358247324.png" class="" title="WebSocket connection closed"><span id="more"></span><img src="/2019/01/13/tencent-cloud-cdn-and-websocket/2710675219_869254_1547358224997.png" class="" title="WebSocket connection closed"><p>經過與騰訊雲的工程師討論, 得知：</p><p>CDN 預設的回源超時時間是10秒<br>回源超過 10 秒無資料會回源失敗.</p><p>也就是說 WebSocket 必須至少每 10 秒有一次互動, 否則會被斷開.</p><p>同理 long polling 也受此規則的影響.</p><p>使用心跳包可以避免連結被斷開.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;眾所周知, 騰訊雲 CDN 是支援 WebSocket 的, 但是最近的一個專案中使用 SignalR 時發現在生產環境中 WebSocket 連結總是在聯通 10 秒左右自動斷開, 錯誤程式碼 1006.&lt;/p&gt;
&lt;img src=&quot;/2019/01/13/tencent-cloud-cdn-and-websocket/2710675219_869255_1547358247324.png&quot; class=&quot;&quot; title=&quot;WebSocket connection closed&quot;&gt;</summary>
    
    
    
    <category term="網際網路" scheme="https://blog.7in0.me/categories/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Base62 BitConverter 以及 CPU 端序</title>
    <link href="https://blog.7in0.me/2018/07/30/base62-bitconverter-and-cpu-endianness/"/>
    <id>https://blog.7in0.me/2018/07/30/base62-bitconverter-and-cpu-endianness/</id>
    <published>2018-07-30T03:23:27.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>之前我實作了一個 C# 的 Base62 編碼庫 <a href="https://www.nuget.org/packages/Base62-Net">Base62-Net</a>, 第一個版本提供位元組陣列的編碼解碼.</p><p>於是在實際使用中, 需要使用<code>Encoding.UTF8.GetBytes()</code>來將字串轉換為位元組陣列, 對於數字則需要使用<code>BitConverter.GetBytes()</code>.</p><span id="more"></span><p>但是, 使用<code>BitConverter.GetBytes()</code>時, 必須注意CPU 端序, 因為 Base62 編碼使用大端序, 而<code>BitConverter.GetBytes()</code>在不同機器上根據 CPU 端序而表現不同.</p><p>這就導致對數字進行 Base62 編碼時可能與其他程式語言中的結果不同.</p><p>因此需要在使用<code>BitConverter.GetBytes()</code>之後判斷<code>BitConverter.IsLittleEndian</code>, 然後使用<code>Array.Reserve()</code>變換端序.</p><p>昨天釋出的 Base62-Net 1.1.0 已經包含了對字串和整型的編碼解碼功能.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前我實作了一個 C# 的 Base62 編碼庫 &lt;a href=&quot;https://www.nuget.org/packages/Base62-Net&quot;&gt;Base62-Net&lt;/a&gt;, 第一個版本提供位元組陣列的編碼解碼.&lt;/p&gt;
&lt;p&gt;於是在實際使用中, 需要使用&lt;code&gt;Encoding.UTF8.GetBytes()&lt;/code&gt;來將字串轉換為位元組陣列, 對於數字則需要使用&lt;code&gt;BitConverter.GetBytes()&lt;/code&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>我為什麼不再使用 Keybase</title>
    <link href="https://blog.7in0.me/2018/06/28/why-i-delete-my-keybase-account/"/>
    <id>https://blog.7in0.me/2018/06/28/why-i-delete-my-keybase-account/</id>
    <published>2018-06-28T09:16:25.000Z</published>
    <updated>2021-10-04T13:26:45.194Z</updated>
    
    <content type="html"><![CDATA[<p>Keybase 對 PGP 和網路信任來說是一個好的嘗試, 但是他也有一些缺陷.</p><p>首先, 他必須安裝一個 Keybase 應用才可以正常使用, 這個問題不大, 一個好的產品會有很多人去安裝他的應用, 而且這個應用足夠簡潔易用.</p><p>其次, 他獨立於 PGP 之外設立了自己的信任體系, 使用者在 Keybase 上的信任操作與 PGP 金鑰關係不大, 充其量是在執行操作的時候用 PGP 私鑰認證.這些信任操作並不會體現在 PGP 公鑰上, 也就是說, 使用 Keybase 對 PGP 信任體系沒有貢獻.</p><p>最後, 他的定位和功能對我沒有太大吸引力.作為加密 IM 工具, 我在使用 Telegram 和 Signal作為檔案加密和簽名工具, 我更喜歡用更加開放的 PGP 和相關公鑰交換網路Git 託管比起 GitHub 和自建私有伺服器亦不能被我所信賴.</p><p>所以我現在已經放棄了 Keybase, 清理了資料, 刪除了賬戶.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Keybase 對 PGP 和網路信任來說是一個好的嘗試, 但是他也有一些缺陷.&lt;/p&gt;
&lt;p&gt;首先, 他必須安裝一個 Keybase 應用才可以正常使用, 這個問題不大, 一個好的產品會有很多人去安裝他的應用, 而且這個應用足夠簡潔易用.&lt;/p&gt;
&lt;p&gt;其次, 他獨立於 </summary>
      
    
    
    
    <category term="網際網路" scheme="https://blog.7in0.me/categories/%E7%B6%B2%E9%9A%9B%E7%B6%B2%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>gRPC TLS 相互驗證和自訂驗證</title>
    <link href="https://blog.7in0.me/2018/05/28/tls-mutual-authentication-and-custom-authentication-in-grpc/"/>
    <id>https://blog.7in0.me/2018/05/28/tls-mutual-authentication-and-custom-authentication-in-grpc/</id>
    <published>2018-05-28T15:37:23.000Z</published>
    <updated>2021-10-04T13:26:45.194Z</updated>
    
    <content type="html"><![CDATA[<p>gRPC 目前已經支援 TLS 相互驗證, Google 驗證和自訂驗證, 但說明 (<a href="https://grpc.io/docs/guides/auth.html">gRPC Authentication</a>) 中的相關內容十分有限, 今天踩到好幾次坑.</p><span id="more"></span><h3 id="TLS-相互驗證">TLS 相互驗證</h3><p>伺服器端以 Go 為例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 說明中指出可使用如下方案, 但此種寫法不強制要求相互驗證</span></span><br><span class="line"><span class="comment">// creds := credentials.NewServerTLSFromFile(certFile, keyFile)</span></span><br><span class="line"><span class="comment">// s := grpc.NewServer(grpc.Creds(creds))</span></span><br><span class="line"><span class="comment">// 注意其實此寫法存在錯誤, NewServerTLSFromFile() 傳回值為 (TransportCredentials, error)</span></span><br><span class="line"><span class="comment">// 故應寫成 creds, _ := credentials.NewServerTLSFromFile(certFile, keyFile)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 載入 TLS 伺服器憑據</span></span><br><span class="line">cert, err := tls.LoadX509KeyPair(<span class="string">&quot;cert/server1.pem&quot;</span>, <span class="string">&quot;cert/server1.key&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatalf(<span class="string">&quot;failed to load key pair: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 載入憑據 CA</span></span><br><span class="line">caCert, err := ioutil.ReadFile(<span class="string">&quot;cert/ca.pem&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  log.Fatalf(<span class="string">&quot;failed to load key pair: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">caCertPool := x509.NewCertPool()</span><br><span class="line">caCertPool.AppendCertsFromPEM(caCert)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定 gRPC ServerOption</span></span><br><span class="line">opts := []grpc.ServerOption&#123;</span><br><span class="line">  grpc.Creds(credentials.NewTLS(&amp;tls.Config&#123;</span><br><span class="line">    Certificates: []tls.Certificate&#123;cert&#125;, <span class="comment">// TLS 憑據</span></span><br><span class="line">    ClientCAs:    caCertPool, <span class="comment">// 憑據 CA</span></span><br><span class="line">    ClientAuth:   tls.RequireAndVerifyClientCert, <span class="comment">// 要求用戶端憑證驗證</span></span><br><span class="line">  &#125;)),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建新 gRPC 伺服器</span></span><br><span class="line">s := grpc.NewServer(opts...)</span><br></pre></td></tr></table></figure><p>用戶端以 NodeJS 為例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> grpc <span class="keyword">from</span> <span class="string">&#x27;grpc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ssl_creds = grpc.credentials.createSsl(readFileSync(__dirname + <span class="string">&#x27;/cert/server1.pem&#x27;</span>), readFileSync(__dirname + <span class="string">&#x27;/cert/client.key&#x27;</span>), readFileSync(__dirname + <span class="string">&#x27;/cert/client.pem&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> services.WalletClient(<span class="string">&#x27;localhost:8080&#x27;</span>, ssl_creds);</span><br></pre></td></tr></table></figure><h3 id="自訂驗證">自訂驗證</h3><p>為了加強 RPC 安全性, 除 TLS 相互驗證之外, 我還希望引入利用 HTTP Header 的自訂驗證.</p><p>開始時思路為傳遞一個 RPC 的 HMAC-SHA256 數位簽名, 為了避免重送攻擊, 在生成簽名時引入時間戳和 Nonce.</p><p>為了實現相關功能, 需要用到 gRPC 的攔截器 (Interceptor), 在 gRPC 中, 攔截器與各種 HTTP 伺服器軟體的中介層 (middleware) 作用類似, 分為伺服器端攔截器和用戶端攔截器, 可以對請求動作添加額外邏輯.</p><p>仔細分析了 gRPC 的原始碼, 發現對完整 RPC 用戶端請求進行簽名的可能性極低 (伺服器端攔截器不方便獲取請求內容, 用戶端攔截器無法獲取到請求內容), 遂改為對用戶端請求動作 (URI) 進行簽名.</p><p>對伺服器端進行修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ensureValidToken</span><span class="params">(ctx context.Context, req <span class="keyword">interface</span>&#123;&#125;, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">  md, ok := metadata.FromIncomingContext(ctx)</span><br><span class="line">  <span class="keyword">if</span> !ok &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errMissingMetadata</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// metadata.MD 中所有 key 都是小寫的</span></span><br><span class="line">  <span class="comment">// https://godoc.org/google.golang.org/grpc/metadata#New</span></span><br><span class="line">  <span class="keyword">if</span> !valid(md[<span class="string">&quot;authorization&quot;</span>], md[<span class="string">&quot;x-auth-timestamp&quot;</span>], md[<span class="string">&quot;x-auth-nonce&quot;</span>], info.FullMethod) &#123;</span><br><span class="line">    <span class="comment">// valid 函式的實現不在此處討論</span></span><br><span class="line">    <span class="comment">// info.FullMethod 即用戶端請求動作的 URI</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>, errInvalidToken</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> handler(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opts := []grpc.ServerOption&#123;</span><br><span class="line">  grpc.UnaryInterceptor(ensureValidToken), <span class="comment">// 設定攔截器</span></span><br><span class="line">  grpc.Creds(credentials.NewTLS(&amp;tls.Config&#123;</span><br><span class="line">    Certificates: []tls.Certificate&#123;cert&#125;,</span><br><span class="line">    ClientCAs:    caCertPool,</span><br><span class="line">    ClientAuth:   tls.RequireAndVerifyClientCert,</span><br><span class="line">  &#125;)),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>對用戶端進行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果不需要 options.method_definition.path 等資訊, 可以使用 createFromMetadataGenerator</span></span><br><span class="line"><span class="comment">// grpc.credentials.createFromMetadataGenerator(function(args, callback) &#123;</span></span><br><span class="line"><span class="comment">//   var metadata = new Metadata();</span></span><br><span class="line"><span class="comment">//   metadata.add(&#x27;authorization&#x27;, &#x27;something-here&#x27;);</span></span><br><span class="line"><span class="comment">//   callback(null, metadata);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 此處將 ssl_creds 和 call_creds 合併為 combined_creds</span></span><br><span class="line"><span class="comment">// const combined_creds = grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);</span></span><br><span class="line"><span class="comment">// const client = new services.WalletClient(&#x27;localhost:8080&#x27;, combined_creds);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用攔截器實現添加 metadata</span></span><br><span class="line"><span class="keyword">const</span> interceptor = <span class="function"><span class="keyword">function</span>(<span class="params">options, nextCall</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> grpc.InterceptingCall(nextCall(options), &#123;</span><br><span class="line">        <span class="attr">start</span>: <span class="function"><span class="keyword">function</span>(<span class="params">metadata, listener, next</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// options.method_definition.path 即請求動作的 URI</span></span><br><span class="line">            <span class="comment">// 部分邏輯略去, 具體實現不在此討論</span></span><br><span class="line">            <span class="comment">// 創建新 metadata 並且添加欄位</span></span><br><span class="line">            <span class="keyword">var</span> metadata = <span class="keyword">new</span> grpc.Metadata();</span><br><span class="line">            metadata.add(<span class="string">&#x27;authorization&#x27;</span>, <span class="string">&#x27;Basic: &#x27;</span> + Buffer.from(client_id + <span class="string">&#x27;:&#x27;</span> + signature).toString(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line">            metadata.add(<span class="string">&#x27;x-auth-timestamp&#x27;</span>, timestamp.toString());</span><br><span class="line">            metadata.add(<span class="string">&#x27;x-auth-nonce&#x27;</span>, nonce);</span><br><span class="line"></span><br><span class="line">            next(metadata, listener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> services.WalletClient(<span class="string">&#x27;localhost:8080&#x27;</span>, ssl_creds, &#123;</span><br><span class="line">    <span class="attr">interceptors</span>: [interceptor] <span class="comment">// 默認攔截器</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="小結">小結</h3><p>gRPC 作為 Google 開發的 RPC 專案, 目前正在蓬勃發展, 文檔難免有落後於實際功能之處, 如果每次都要翻閱原始碼, 真的是十分不方便, 所以將本次經歷記下希望其他人有遇到類似情況可以少走一些彎路.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;gRPC 目前已經支援 TLS 相互驗證, Google 驗證和自訂驗證, 但說明 (&lt;a href=&quot;https://grpc.io/docs/guides/auth.html&quot;&gt;gRPC Authentication&lt;/a&gt;) 中的相關內容十分有限, 今天踩到好幾次坑.&lt;/p&gt;</summary>
    
    
    
    <category term="軟體開發" scheme="https://blog.7in0.me/categories/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>為從 Finder 啟動的應用程式設定 PATH 環境變數</title>
    <link href="https://blog.7in0.me/2018/05/19/set-path-for-appalications-launched-from-finder/"/>
    <id>https://blog.7in0.me/2018/05/19/set-path-for-appalications-launched-from-finder/</id>
    <published>2018-05-19T06:05:38.000Z</published>
    <updated>2021-10-04T13:26:45.190Z</updated>
    
    <content type="html"><![CDATA[<p>今天在 V2EX 看到有網友詢問 <code>telnet://</code> protocol 無法正常工作的問題, 稍微做了一些調查.</p><span id="more"></span><p><img src="87c01ec7gy1frgld5khmuj21f00vidlg.jpg" alt="Set URL Schemes handler"></p><p>先將 <code>telnet://</code> 啟動的默認應用程式改為 iTerm2, 然後使用指令 <code>open telnet://111</code>.</p><p><img src="87c01ec7gy1frglghmae4j20vk04cjs4.jpg" alt="Failed to exec telnet"></p><p>可以看到提示找不不到 <code>telnet</code> 可執行檔, PATH 環境變數只包含少數幾個路徑.</p><p><img src="87c01ec7gy1frgmkbr74tj207s06e74m.jpg" alt="System PATHs"></p><p>而經檢查, 確認我已經在 <code>/etc/paths</code> 中設定的一系列路徑.</p><p>通過 Google 檢索, 了解到自 Mac OS X 10.9 開始, <code>/etc/paths</code>, <code>/etc/launchd.conf</code> 和 <code>~/.MacOSX/environment.plist</code> 不再對 Finder 啟動的應用程式有效, 解決辦法有二.</p><h3 id="辦法一-修改-App-的-Info-plist-設定-LSEnvironment">辦法一 修改 App 的 <code>Info.plist</code> 設定 <code>LSEnvironment</code></h3><p><img src="87c01ec7gy1frgmxq0vwcj218k03amyf.jpg" alt="Set PATH in Info.plist"></p><p>用 Xcode 修改 <code>/Applications/iTerm.app/Contents/Info.plist</code>, 注意 <code>LSEnvironment</code> 被自動識別為 <code>Environment variables</code>.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSEnvironment<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">key</span>&gt;</span>PATH<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然後執行下面的指令更新 LaunchServices 資料庫</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -v -f /Applications/iTerm.app</span><br><span class="line">lsregister: processing /Applications/iTerm.app</span><br><span class="line">lsregister: registered /Applications/iTerm.app</span><br></pre></td></tr></table></figure><h3 id="辦法二-使用-launchctl-設定-PATH">辦法二 使用 <code>launchctl</code> 設定 PATH</h3><p><em>本辦法只在 Mac OS X 10.10 及之後版本有效</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo launchctl config user path /usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/sbin</span><br><span class="line">Configuration applied. You must reboot <span class="keyword">for</span> changes to take effect.</span><br></pre></td></tr></table></figure><p>然後重新開機.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天在 V2EX 看到有網友詢問 &lt;code&gt;telnet://&lt;/code&gt; protocol 無法正常工作的問題, 稍微做了一些調查.&lt;/p&gt;</summary>
    
    
    
    <category term="應用技巧" scheme="https://blog.7in0.me/categories/%E6%87%89%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 上使用 Touch ID 認證 sudo</title>
    <link href="https://blog.7in0.me/2018/05/02/use-touch-id-to-authenticate-sudo-on-mac/"/>
    <id>https://blog.7in0.me/2018/05/02/use-touch-id-to-authenticate-sudo-on-mac/</id>
    <published>2018-05-02T10:18:43.000Z</published>
    <updated>2021-10-04T13:26:45.194Z</updated>
    
    <content type="html"><![CDATA[<p>雖然網路上應該隨便搜索一下就可以找到相關內容, 但是考慮到這裡長草許久, 還是隨便寫點東西.</p><p>入手新 MacBook Pro with Touch Bar 之後, 發現 Touch ID 十分好用, 美中不足是 terminal 裡 <code>sudo</code> 不能享受這一便利.</p><span id="more"></span><p>感謝 <a href="https://github.com/mattrajca/sudo-touchid">sudo-touchid</a> 專案帶給我的便利, 不過後來我發現了 macOS 自帶的隱藏功能.</p><p><code>sudo</code> 指令是利用 pam 進行認證的, macOS 中提供了一個 <code>pam_tid.so</code> 檔, 只要添加到 <code>sudo</code> 指令的 pam 設定中就可以了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/pam.d/sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># sudo: auth account password session</span></span><br><span class="line">auth       sufficient     pam_tid.so <span class="comment"># 新增這行</span></span><br><span class="line">auth       sufficient     pam_smartcard.so</span><br></pre></td></tr></table></figure><p>因為 <code>/etc/pam.d/sudo</code> 檔唯讀, 所以需要用 <code>:w!</code> 存儲.</p><p><img src="87c01ec7gy1frgnmgy396j20oq08ct9o.jpg" alt="Touch ID for sudo"></p><p>現在就可以在使用 <code>sudo</code> 時按手指了.</p><p><em>Updated 2019/06/22</em></p><p>iTerm2 3.2.8 預設不支援此用法, 需要手動配置 <code>Allow sessions to survive logging out and back in</code> 為 <code>No</code>.</p><p>詳見：<a href="https://gitlab.com/gnachman/iterm2/issues/7618">https://gitlab.com/gnachman/iterm2/issues/7618</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;雖然網路上應該隨便搜索一下就可以找到相關內容, 但是考慮到這裡長草許久, 還是隨便寫點東西.&lt;/p&gt;
&lt;p&gt;入手新 MacBook Pro with Touch Bar 之後, 發現 Touch ID 十分好用, 美中不足是 terminal 裡 &lt;code&gt;sudo&lt;/code&gt; 不能享受這一便利.&lt;/p&gt;</summary>
    
    
    
    <category term="應用技巧" scheme="https://blog.7in0.me/categories/%E6%87%89%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>在 macOS 上使用 Dnsmasq 進行測試</title>
    <link href="https://blog.7in0.me/2017/11/25/dnsmasq-dev-macos/"/>
    <id>https://blog.7in0.me/2017/11/25/dnsmasq-dev-macos/</id>
    <published>2017-11-25T10:07:17.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>通常我們需要修改<code>/etc/hosts</code>以進行測試, 例如<code>127.0.0.1 abc.dev</code>, 有些時候使用 Gas Mask 可以更方便一些.</p><p>但是這樣還是需要頻繁修改hosts檔.</p><p>可以改用 Dnsmasq 來更方便地解決問題.</p><span id="more"></span><p>主要思路：</p><ol><li>安裝 Dnsmasq</li><li>設定 Dnsmasq 解析<code>*.dev</code>為<code>127.0.0.1</code></li><li>設定 macOS 使用 Dnsmasq 處理<code>.dev</code>域</li></ol><h3 id="安裝-Dnsmasq">安裝 Dnsmasq</h3><p>使用 Homebrew 安裝</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install dnsmasq</span><br></pre></td></tr></table></figure><h3 id="設定-Dnsmasq">設定 Dnsmasq</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ vim /usr/<span class="built_in">local</span>/etc/dnsmasq.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># address=/double-click.net/127.0.0.1</span></span><br><span class="line">address=/dev/127.0.0.1</span><br><span class="line"></span><br><span class="line">$ sudo brew services start dnsmasq</span><br><span class="line"></span><br><span class="line">$ dig abc.dev @127.0.0.1</span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">abc.dev. 0 IN   A   127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="設定-macOS">設定 macOS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir -p /etc/resolver</span><br><span class="line">$ sudo vim /etc/resolver/dev</span><br><span class="line">nameserver 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="測試">測試</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ping he.net</span><br><span class="line">$ ping abc.dev</span><br><span class="line">$ ping foo.bar.dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通常我們需要修改&lt;code&gt;/etc/hosts&lt;/code&gt;以進行測試, 例如&lt;code&gt;127.0.0.1 abc.dev&lt;/code&gt;, 有些時候使用 Gas Mask 可以更方便一些.&lt;/p&gt;
&lt;p&gt;但是這樣還是需要頻繁修改hosts檔.&lt;/p&gt;
&lt;p&gt;可以改用 Dnsmasq 來更方便地解決問題.&lt;/p&gt;</summary>
    
    
    
    <category term="應用技巧" scheme="https://blog.7in0.me/categories/%E6%87%89%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 上 Ejabberd extauth 設定</title>
    <link href="https://blog.7in0.me/2017/09/20/ejabberd-extauth-on-ubuntu-16-04/"/>
    <id>https://blog.7in0.me/2017/09/20/ejabberd-extauth-on-ubuntu-16-04/</id>
    <published>2017-09-20T04:59:40.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>Ejabberd 支援通過執行外部程式自定義外部認證邏輯, ejabberd 的<a href="https://www.ejabberd.im/extauth">網頁</a>上提供了一些第三方程式碼可供參考.詳細的說明在 <a href="https://www.ejabberd.im/files/doc/dev.html#htoc9">ejabberd Developers Guide</a>.</p><span id="more"></span><p>以 ejabberd Developers Guide 中提供的 python 範例為基礎進行改進, 首先修改 python 版本為 python3.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br></pre></td></tr></table></figure><p>修改為</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python3</span></span><br></pre></td></tr></table></figure><p>對於 python3 不同於 python2 的部分做如下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    (size,) = unpack(<span class="string">&#x27;&gt;h&#x27;</span>, input_length)</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_ejabberd</span>(<span class="params"><span class="built_in">bool</span></span>):</span></span><br><span class="line">    answer = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">bool</span>:</span><br><span class="line">        answer = <span class="number">1</span></span><br><span class="line">    token = pack(<span class="string">&#x27;&gt;hh&#x27;</span>, <span class="number">2</span>, answer)</span><br><span class="line">    sys.stdout.write(token)</span><br><span class="line">    sys.stdout.flush()</span><br></pre></td></tr></table></figure><p>修改為</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    (size,) = unpack(<span class="string">&#x27;&gt;h&#x27;</span>, input_length.encode())</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_ejabberd</span>(<span class="params">result</span>):</span></span><br><span class="line">    <span class="keyword">if</span> result:</span><br><span class="line">        sys.stdout.write(<span class="string">&#x27;\x00\x02\x00\x01&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sys.stdout.write(<span class="string">&#x27;\x00\x02\x00\x00&#x27;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br></pre></td></tr></table></figure><p>之後可對<code>auth()</code>, <code>isuser()</code>, <code>setpass()</code>做改動以適應自己的認證邏輯.其中<code>isuser()</code>和<code>setpass()</code>可以保留<code>return True</code>.</p><p>最後將修改好的檔案丟去<code>/etc/ejabberd/extauth.py</code>, 修改 owner 為<code>ejabberd</code>, 添加執行權限.</p><p>在<code>/etc/ejabberd/ejabberd.yml</code>找到<code>auth_method: internal</code>修改為：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_method:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">internal</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">external</span></span><br></pre></td></tr></table></figure><p>在其下方增加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extauth_program:</span> <span class="string">&quot;/etc/ejabberd/extauth.py&quot;</span></span><br><span class="line"><span class="attr">extauth_instances:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">auth_use_cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>通過<code>ejabberdcctl</code>重新啟動<code>ejabberd</code>使設定生效.</p><p>若出現<code>extauth script has exitted abruptly with reason 'normal'</code>, 在排除檔案 owner 和執行權限有誤的情況下, 可能為<code>apparmor</code>所致 (帶有 SELinux 的作業系統中可能為 SELinux 所致, 可以通過<code>sudo setenforce 0</code>臨時關閉 SELinux 測試) , 查看<code>/var/log/syslog</code>可看到相關 log.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sep 19 11:31:45 localhost kernel: [ 5031.995813] audit: type=1400 audit(1505827901.939:57): apparmor=&quot;DENIED&quot; operation=&quot;exec&quot; profile=&quot;/usr/sbin/ejabberdctl&quot; name=&quot;/var/lib/ejabberd/extauth.py&quot; pid=4419 comm=&quot;sh&quot; requested_mask=&quot;x&quot; denied_mask=&quot;x&quot; fsuid=100 ouid=100</span><br></pre></td></tr></table></figure><p>臨時解決方法是移除<code>apparmor</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get purge --auto-remove apparmor</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Ejabberd 支援通過執行外部程式自定義外部認證邏輯, ejabberd 的&lt;a href=&quot;https://www.ejabberd.im/extauth&quot;&gt;網頁&lt;/a&gt;上提供了一些第三方程式碼可供參考.詳細的說明在 &lt;a href=&quot;https://www.ejabberd.im/files/doc/dev.html#htoc9&quot;&gt;ejabberd Developers Guide&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="應用技巧" scheme="https://blog.7in0.me/categories/%E6%87%89%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>GitLab Azure AD 設定</title>
    <link href="https://blog.7in0.me/2017/03/10/gitlab-azure-ad-configuration/"/>
    <id>https://blog.7in0.me/2017/03/10/gitlab-azure-ad-configuration/</id>
    <published>2017-03-10T09:42:46.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>GitLab 自帶 Azure AD Oauth2 支援, 詳見 GitLab 文檔 <a href="https://docs.gitlab.com/ce/integration/azure.html">https://docs.gitlab.com/ce/integration/azure.html</a></p><span id="more"></span><h3 id="註冊企業應用程式">註冊企業應用程式</h3><p>首先在 Azure 入口網站 Azure AD 管理界面註冊企業應用程式, 到“Azure Active Directory”-“預設目錄”-“應用程式註冊”點“加入”, 填寫“名稱”和“登入URL”創建企業應用程式, 然後點“端點”查看鏈接內的TENANT ID.</p><p>然後到新創建的應用“設定”-“金鑰”中創建新的金鑰並記下來.</p><h3 id="設定-GitLab">設定 GitLab</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">sudo</span> <span class="string">-u</span> <span class="string">git</span> <span class="string">-H</span> <span class="string">editor</span> <span class="string">config/gitlab.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## OmniAuth settings</span></span><br><span class="line">  <span class="attr">omniauth:</span></span><br><span class="line">    <span class="comment"># Allow login via Twitter, Google, etc. using OmniAuth providers</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># CAUTION!</span></span><br><span class="line">    <span class="comment"># This allows users to login without having a user account first. Define the allowed providers</span></span><br><span class="line">    <span class="comment"># using an array, e.g. [&quot;saml&quot;, &quot;twitter&quot;], or as true/false to allow all providers or none.</span></span><br><span class="line">    <span class="comment"># User accounts will be created automatically when authentication was successful.</span></span><br><span class="line">    <span class="attr">allow_single_sign_on:</span> [<span class="string">&quot;azure_oauth2&quot;</span>] <span class="comment">#在這裏設定 Azure Oauth2</span></span><br><span class="line">    <span class="attr">auto_link_ldap_user:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Locks down those users until they have been cleared by the admin (default: true).</span></span><br><span class="line">    <span class="attr">block_auto_created_users:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">omniauth_providers:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&#x27;azure_oauth2&#x27;</span>, <span class="attr">args:</span> &#123; <span class="attr">client_id:</span> <span class="string">&quot;CLIENT ID&quot;</span>, <span class="attr">client_secret:</span> <span class="string">&quot;CLIENT SECRET&quot;</span>, <span class="attr">tenant_id:</span> <span class="string">&quot;TENANT ID&quot;</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">restart</span> <span class="string">gitlab</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;GitLab 自帶 Azure AD Oauth2 支援, 詳見 GitLab 文檔 &lt;a href=&quot;https://docs.gitlab.com/ce/integration/azure.html&quot;&gt;https://docs.gitlab.com/ce/integration/azure.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="雜物箱" scheme="https://blog.7in0.me/categories/%E9%9B%9C%E7%89%A9%E7%AE%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>GitLab 8.17 中文化</title>
    <link href="https://blog.7in0.me/2017/03/10/gitlab-8-17-zh-cn-localization/"/>
    <id>https://blog.7in0.me/2017/03/10/gitlab-8-17-zh-cn-localization/</id>
    <published>2017-03-10T08:53:12.000Z</published>
    <updated>2021-10-04T13:26:45.186Z</updated>
    
    <content type="html"><![CDATA[<p>之前, 我安裝了 GitLab 8.17. 現在有需求將其中文化.</p><p>本文參考了 <a href="https://larryli.cn/2015/07/644905">https://larryli.cn/2015/07/644905</a>.</p><span id="more"></span><h3 id="簡單粗暴">簡單粗暴</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl stop gitlab</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /tmp</span><br><span class="line">$ sudo -u git -H git <span class="built_in">clone</span> https://gitlab.com/xhang/gitlab.git -b 8-17-stable-zh gitlab-zh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /home/git/gitlab</span><br><span class="line">$ sudo -u git -H cp -R /tmp/gitlab-zh/* .</span><br><span class="line"></span><br><span class="line">$ sudo systemctl start gitlab</span><br></pre></td></tr></table></figure><h3 id="規範做法">規範做法</h3><p>在安裝 GitLab 的時候, 直接使用前文中的中文版進行安裝.</p><p>或安裝完成後, 備份 /home/git/gitlab, clone 中文版到 /home/git/gitlab, 然後複製備份中的文件到 /home/git/gitlab.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前, 我安裝了 GitLab 8.17. 現在有需求將其中文化.&lt;/p&gt;
&lt;p&gt;本文參考了 &lt;a href=&quot;https://larryli.cn/2015/07/644905&quot;&gt;https://larryli.cn/2015/07/644905&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="雜物箱" scheme="https://blog.7in0.me/categories/%E9%9B%9C%E7%89%A9%E7%AE%B1/"/>
    
    
  </entry>
  
</feed>
